generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  password       String
  firstName      String?
  lastName       String?
  phone          String?
  role           UserRole      @default(CLIENT)
  emailVerified  Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Organization {
  id          String    @id @default(uuid())
  name        String
  description String?
  logo        String?
  website     String?
  email       String?
  phone       String?
  address     String?
  sector      String
  siret       String?
  tva         String?
  legalForm   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
  users       User[]
}

enum UserRole {
  CLIENT
  PRESTATAIRE
  ADMIN
}

enum ServiceType {
  IRL
  ONLINE
  MIXED
}

enum ConsumptionType {
  INSTANT
  PERIODIC
  PRESTATION
}

enum BillingPlan {
  UNIT
  USAGE
  MINUTE
  MENSUAL
  ANNUAL
  PROJECT
}

enum PaymentMode {
  CREDIT
  EUR
  USD
  GBP
  CRYPTO
}

model Service {
  id              String          @id @default(uuid())
  title           String
  summary         String?         // Résumé court
  description     String
  mainMedia       String?         // URL de la bannière/média principal
  serviceType     ServiceType     @default(MIXED)
  consumptionType ConsumptionType @default(PRESTATION)
  billingPlan     BillingPlan     @default(PROJECT)
  lowerPrice      Float
  upperPrice      Float
  paymentMode     PaymentMode     @default(EUR)
  tags            String[]
  isAIReplaceable Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  aiExecutions    ServiceExecution[]
}

model ServiceExecution {
  id              String   @id @default(uuid())
  userRequest     String   // La demande du client
  aiResponse      String   // La réponse de l'IA
  executedBy      String   @default("Chef Cuisinier IA Business")
  threadId        String?  // ID de thread pour traçabilité
  executedAt      DateTime @default(now())
  responseLength  Int?     // Longueur de la réponse pour analytics
  
  // Relations
  serviceId       String
  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}